#!/usr/bin/env python
"""
Script to generate costh Toy MC histograms for usage in the Toy MC tests
"""
import json

import numpy as np

import ROOT as r
r.PyConfig.IgnoreCommandLineOptions = True
r.gROOT.SetBatch()

from utils.data_handling import get_dataframe
from utils.hist_utils import create_histogram


def read_costh_binning(binningfile):
    """
    Read the costh info file and return the settings already in a format that
    can be passed to create_histogram
    """
    with open(binningfile, 'r') as bfile:
        costh_info = json.load(bfile)

    costh_bng = costh_info['costh_bins']
    costh_bng = np.array([c[0] for c in costh_bng] + [costh_bng[-1][1]])

    return (len(costh_bng) - 1, costh_bng)


def main(args):
    """Main"""
    # While loading also disregard the events with JpsiRap > 1.2 which have been
    # accidentally stored for parts of the generations
    data = get_dataframe(args.toymcfile, columns=['costh_HX', '*eff_sm'],
                         where='TMath::Abs(JpsiRap) < 1.2')
    # per-event efficiency as product of photon x muon efficiencies
    eff = lambda d: d.gamma_eff_sm * 0.01 * d.lepP_eff_sm * d.lepN_eff_sm

    costh_binning = read_costh_binning(args.binningfile)
    hist = create_histogram(data.costh_HX.abs(), costh_binning,
                            weights=eff(data), name=args.name,
                            x_axis='|cos#vartheta^{HX}|')

    outfile = r.TFile.Open(args.output, 'update')
    hist.Write()
    outfile.Close()


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Script to generate costh '
                                     'Toy MC histograms according to a certain '
                                     'data costh binning')
    parser.add_argument('toymcfile', help='Toy MC input file')
    parser.add_argument('binningfile', help='File containing the costh binning '
                        'information (e.g. as generated by the '
                        'costh_binned_massfits)')
    parser.add_argument('-o', '--output', help='Name of the file where the '
                         'generated histogram will be stored',
                         default='hists.root')
    parser.add_argument('-n', '--name', help='Name of the histogram that will '
                         'be used for storing', default='costh_hist')

    clargs = parser.parse_args()
    main(clargs)
