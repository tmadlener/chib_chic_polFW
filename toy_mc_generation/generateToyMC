#!/bin/bash

set -e
# Script for generating Toy MC samples

###########################################################
# SETTINGS FOR RUNNING THE GENERATION ON THE BATCH SYSTEM #
###########################################################
# number of events to generate
NEVENTS=200000000
# NACCEPT=1500000  # run until at least as many events are accepted (comment to exhaust NEVENTS)

# Start N_JOBS each generating NEVENTS events (set to 1 or comment to start only one job)
 N_JOBS=50

# efficiency files
# MUON_EFFS=$(pwd)/EffFiles/single_muon_effs_noTracking_L3ptg2_final_graph_MC.root
MUON_EFFS=$(pwd)/EffFiles/single_muon_effs_noTracking_L3ptg2_final_fit.root
# PHOTON_EFFS=$(pwd)/EffFiles/photon_effs_param.root
PHOTON_EFFS=$(pwd)/EffFiles/photon_effs_param_integrated.root

# output base directory
# OUTBASEDIR=${WORK}/ChiPol/chic2_chic1_ratios/toy_mc_data_gen_new/acceptance_correction_maps_data/high_stat_costh_phi_maps/gen_HX_4d_histogram_2rap_bins_post_fix/min_muPt_5p6/no_sampling/with_folding/
# OUTBASEDIR=${WORK}/ChiPol/chic2_chic1_ratios/toy_mc_data_gen_new/acceptance_correction_maps_data/gen_HX/reco_level_postfix/no_rap_dep_sign_flip/test_samples
# OUTBASEDIR=${WORK}/ChiPol/chic2_chic1_ratios/toy_mc_data_gen_new/acceptance_correction_maps_data/gen_HX/reco_level_samples_larger_pt_window/
# OUTBASEDIR=${WORK}/ChiPol/chic2_chic1_ratios/toy_mc_data_gen_new/acceptance_correction_maps_data/gen_CS/special_phi_scenarios_large_pt_window/
# OUTBASEDIR=${WORK}/ChiPol/chic2_chic1_ratios/toy_mc_data_gen_new/acceptance_correction_maps_data/gen_HX/gen_level_samples/with_jpsi_cut_w_add_data/
# OUTBASEDIR=/afs/hephy.at/data/tmadlener01/ChicPol/Chic2012/ToyMC/gen_level_samples_w_jpsi_cut/additional_vars/
OUTBASEDIR=${WORK}/ChiPol/chic2_chic1_ratios/toy_mc_data_gen_new/final_results/correction_maps/jpsipt_18_50_mu3p5/nominal_mu_effs_integrated_gamma/

# use the CS frame as natural frame
USE_CS_FRAME=0

# Store only the angular variables
STORE_ONLY_ANGLES=0

# Store only costh-phi histograms (at different stages)
# NOTE: If this is enabled then no TTree will be stored
STORE_ONLY_HISTS=1

# Store efficiencies
STORE_EFFS=1

# Generate the distribution root file on the fly
GEN_DISTS=0
# Remove the data file after creating the distribution histogams
RM_SOURCE=0

# kinematic range to accept J/psis in
JPSI_SEL=true
JPSI_MINPT=18
JPSI_MAXPT=50
JPSI_MAXRAP=1.2
JPSI_MINRAP=0 # min ABSOLUTE rapidity for selection

# Do an importance sampling using the costh dimension using the function that is specified in chicpolgen.C
# (in func_sampling_weight)
SAMPLING=false

# muon (loose) and photon selection
# NOTE: If you only want to store costh phi histograms to determine correction maps from them make sure to enable these selections
MUON_SEL=true
PHOTON_SEL=true

# pT range to generate chic in
CHIC1_GENPTRANGE="16.5:70"
CHIC2_GENPTRANGE="16.5:70"
# CHIC1_GENPTRANGE="9.1286:78.9975" # same as "real MC"
# CHIC2_GENPTRANGE="9.2456:80.01"   # same as "real MC"

# Which chic1 helicities should be generated
# comment if you do not want to generate chic1
# CHIC1_HELICITIES=(2./3. 0 1)
# CHIC1_HELICITIES=(1./3.)
CHIC1_HELICITIES=(2./3.)
# CHIC1_HELICITIES=(14./73.)
# CHIC1_HELICITIES=(0 1)
# CHIC1_HELICITIES=(18./31 14./33. 2./9. 1 22./29. 6./7. 10./11.)
# CHIC1_HELICITIES=(1 22./29. 10./11.)

# Which chic2 helicities should be generated (NOTE: need R1 and R2, separated by comma)
# comment if you do not want to generate chic2
# CHIC2_HELICITIES=(2./5.,2./5. 0,0 0,1)
# CHIC2_HELICITIES=(1./3.,0)
# CHIC2_HELICITIES=(2./5.,2./5. 0,0)
# CHIC2_HELICITIES=(0,25./58.)
# CHIC2_HELICITIES=(0,1 0,0)
CHIC2_HELICITIES=(2./5.,2./5.)
# CHIC2_HELICITIES=(0,25./106.)


# other additional arguments that should be passed to run_chicpolgen
# NOTE: these will be overridden by arguments created from settings above!
ADD_ARGS=""


########################################################################################################
# NOTE: HERE ENDS THE PARTS WITH THE SETTINGS, BELOW ARE JUST MANIPULATIONS TO HAVE THE CORRECT FORMAT #
########################################################################################################
# persist the settings from above into a file so that it can in principle be copied in to rerun the
# generation with the current settings
function persist_settings() {
    outfile=${1}/gen_settings.txt
    mv_existing ${outfile}

    persist_vars=(NEVENTS NACCEPT N_JOBS MUON_EFFS PHOTON_EFFS USE_CS_FRAME STORE_ONLY_ANGLES STORE_EFFS\
                          GEN_DISTS RM_SOURCE JPSI_SEL JPSI_MINPT JPSI_MAXPT JPSI_MAXRAP MUON_SEL PHOTON_SEL\
                          CHIC1_GENPTRANGE CHIC2_GENPTRANGE ADD_ARGS STORE_ONLY_HISTS SAMPLING)
    persist_arrays=(CHIC1_HELICITIES CHIC2_HELICITIES)

    for var in ${persist_vars[@]}; do print_var ${var} >> ${outfile}; done
    # no way currently to automatically handle the array variables
    echo "CHIC1_HELICITIES=("${CHIC1_HELICITIES[@]}")" >> ${outfile}
    echo "CHIC2_HELICITIES=("${CHIC2_HELICITIES[@]}")" >> ${outfile}
}

mkdir -p ${OUTBASEDIR}
persist_settings ${OUTBASEDIR}

ADD_ARGS=${ADD_ARGS}"--muonSel "${MUON_SEL}" --photonSel "${PHOTON_SEL}" --jpsiSel "${JPSI_SEL}" --sampling "${SAMPLING}
if [[ ${GEN_DISTS} -eq 1 ]]; then
    ADD_ARGS=${ADD_ARGS}" --create-dists"

    if [[ ${RM_SOURCE} -eq 1 ]]; then
        # Doesn't make sense to remove the source without creating dists
        ADD_ARGS=${ADD_ARGS}" --rm-source"
    fi
fi

if [[ ${USE_CS_FRAME} -eq 1 ]]; then
    ADD_ARGS=${ADD_ARGS}" --CSframe true"
fi

if [[ ${STORE_ONLY_HISTS} -eq 0 ]]; then
    if [[ ${STORE_ONLY_ANGLES} -eq 1 ]]; then
        # ADD_ARGS=${ADD_ARGS}" $(echo --storeBranches {costh,phi}_{HX,PX,CS})" # use echo to expand braces
        ADD_ARGS=${ADD_ARGS}" $(echo --storeBranches {costh,phi}_HX)" # use echo to expand braces
        # ADD_ARGS=${ADD_ARGS}" $(echo cosTH_{PX,CS,HX}_sm)" # psi angle in chi restframe
        # ADD_ARGS=${ADD_ARGS}" $(echo chicMass)"
        ADD_ARGS=${ADD_ARGS}" $(echo Jpsi{Pt,Rap,Mass})" # also need Jpsi pT and rapidity for acceptance maps
        if [[ ${STORE_EFFS} -eq 1 ]]; then
            ADD_ARGS=${ADD_ARGS}" $(echo {gamma,lep{P,N}}_eff_sm)"
            ADD_ARGS=${ADD_ARGS}" $(echo {photon,mu{P,N}}{Pt,Eta})"
        fi
    fi
else
    ADD_ARGS=${ADD_ARGS}" --storeBranches none" # do not store any branches
    ADD_ARGS=${ADD_ARGS}" --storeHists true"
fi

if [[ ${JPSI_SEL} = "true" ]]; then
    ADD_ARGS=${ADD_ARGS}" --psiPtMin "${JPSI_MINPT}" --psiPtMax "${JPSI_MAXPT}" --psiRapMax "${JPSI_MAXRAP}" --psiRapMin "${JPSI_MINRAP}
fi

# cleans up ratio so that it can easily be printed and used in filenames
function pratio() {
    echo $(echo ${1} | sed "s|/|o|;s/\.//g")
}

# all the settings to run (must contain state:helicity1:helicity2)
# the keys will be turned into the output directories and the value
# will be split along the ':' and then used as state, helicity1 and helicity2 input arguments
# Additionally it is possible to set a min and max pt by appending |ptmin:ptmax to the settings
declare -A SETTINGS
for CHIC1_R in ${CHIC1_HELICITIES[@]}; do
    SETTINGS["chic1_R_"$(pratio ${CHIC1_R})]="1:"${CHIC1_R}":0|"${CHIC1_GENPTRANGE}
done

for CHIC2_R in ${CHIC2_HELICITIES[@]}; do
    CHIC2_R1=$(echo ${CHIC2_R} | awk -F',' '{print $1}')
    CHIC2_R2=$(echo ${CHIC2_R} | awk -F',' '{print $2}')
    SETTINGS["chic2_R1_"$(pratio ${CHIC2_R1})"_R2_"$(pratio ${CHIC2_R2})]="2:"${CHIC2_R1}":"${CHIC2_R2}"|"${CHIC2_GENPTRANGE}
done

if [ -n "${NACCEPT}" ]; then
    acceptarg="--naccept "${NACCEPT}
fi

if [ -n "${N_JOBS}" ] && [[ ${N_JOBS} -ne 1 ]]; then
    array_job="--array=1-"${N_JOBS}
fi

for setting in ${!SETTINGS[@]}; do
    args=${SETTINGS["${setting}"]}
    pol_args=$(echo ${args} | awk -F'|' '{print $1}')

    state=$(echo ${pol_args} | awk -F':' '{print $1}')
    helicity1=$(echo "scale=16; "$(echo ${pol_args} | awk -F':' '{print $2}') | bc)
    helicity2=$(echo "scale=16; "$(echo ${pol_args} | awk -F':' '{print $3}') | bc)

    kin_args=$(echo ${args} | awk -F'|' '{print $2}')
    if [ -n "${kin_args}" ]; then
        ptmin=$(echo ${kin_args} | awk -F':' '{print $1}')
        ptmax=$(echo ${kin_args} | awk -F':' '{print $2}')
        pt_args="--ptmin "${ptmin}" --ptmax "${ptmax}
    fi

    outfile=${OUTBASEDIR}/${setting}/toy_data.root

    # throw it to the batch system
    sbatch ${array_job} ./batchRunToyMCGen.sh ${outfile} ${state} ${helicity1} ${helicity2} ${NEVENTS} \
           --muonEffs ${MUON_EFFS} --photonEffs ${PHOTON_EFFS} ${pt_args} --ymax 1.4 \
           ${acceptarg} \
           ${ADD_ARGS}
done
