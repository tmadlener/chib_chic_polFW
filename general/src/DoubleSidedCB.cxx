/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "DoubleSidedCB.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(DoubleSidedCB) 

 DoubleSidedCB::DoubleSidedCB(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mu,
                        RooAbsReal& _sig,
                        RooAbsReal& _a1,
                        RooAbsReal& _n1,
                        RooAbsReal& _a2,
                        RooAbsReal& _n2) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mu("mu","mu",this,_mu),
   sig("sig","sig",this,_sig),
   a1("a1","a1",this,_a1),
   n1("n1","n1",this,_n1),
   a2("a2","a2",this,_a2),
   n2("n2","n2",this,_n2)
 { 
 } 


 DoubleSidedCB::DoubleSidedCB(const DoubleSidedCB& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mu("mu",this,other.mu),
   sig("sig",this,other.sig),
   a1("a1",this,other.a1),
   n1("n1",this,other.n1),
   a2("a2",this,other.a2),
   n2("n2",this,other.n2)
 { 
 } 



Double_t DoubleSidedCB::evaluate() const 
{ 
	double u   = (x-mu)/sig;
	double a = 0;
	double n = 0;
	double sum = 0;
	if ( u < -a1) a=TMath::Abs(a1), n=n1, sum=(a+u); // Low tail
	else if (u > a2) a=TMath::Abs(a2), n=n2, sum=(a-u); // High tail
	else return TMath::Exp(-u*u*0.5); // Gaussian core
		
	double aovern = a/n;
	double p1 = TMath::Exp(-0.5*a*a);
	double p2 = 1. - aovern*sum;
	
	return p1*TMath::Power(p2,-n);
}