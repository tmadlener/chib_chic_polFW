/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "ExpGaussExp.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(ExpGaussExp) 

 ExpGaussExp::ExpGaussExp(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _mean,
                        RooAbsReal& _sigma,
                        RooAbsReal& _k_L,
                        RooAbsReal& _k_H) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   mean("mean","mean",this,_mean),
   sigma("sigma","sigma",this,_sigma),
   k_L("k_L","k_L",this,_k_L),
   k_H("k_H","k_H",this,_k_H)
 { 
 } 


 ExpGaussExp::ExpGaussExp(const ExpGaussExp& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   mean("mean",this,other.mean),
   sigma("sigma",this,other.sigma),
   k_L("k_L",this,other.k_L),
   k_H("k_H",this,other.k_H)
 { 
 } 



 Double_t ExpGaussExp::evaluate() const 
 { 
  // An alternative to a double sided CrystalBall that claims to be much  more stable
  // from https://arxiv.org/pdf/1603.08591.pdf - arXiv:1603.08591v1

   Double_t u = (x - mean) / sigma;
   Double_t exponent = 0;

   if ( u <= (-k_L) ) exponent = 0.5*k_L*k_L + k_L*u;
   else if ( (-k_L) < u && u <= k_H ) exponent = -0.5*u*u;
   else exponent = 0.5*k_H*k_H - k_H*u;

   return TMath::Exp(exponent); 
 } 



